"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = updateTranslationsUnic;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const translate_1 = __importDefault(require("../translate"));
const translateToUnicFolder_1 = __importDefault(require("../translateToUnicFolder"));
function updateTranslationsUnic(key, endpoint, location, fromLang, toLangs, jsonFile, folderNamePath = "unicFolderGeneratedTranslations") {
    const traducoesDir = path.join(process.cwd(), folderNamePath);
    if (!fs.existsSync(traducoesDir)) {
        fs.mkdirSync(traducoesDir, { recursive: true });
    }
    async function translateAndUpdate(lang, obj) {
        const outputFileName = path.join(traducoesDir, `${lang}.json`);
        let existingTranslations = {};
        if (fs.existsSync(outputFileName)) {
            const rawData = fs.readFileSync(outputFileName, "utf8");
            existingTranslations = JSON.parse(rawData);
        }
        const translations = await (0, translate_1.default)(key, endpoint, location, fromLang, [lang], obj);
        const updatedTranslations = Object.assign(Object.assign({}, existingTranslations), translations);
        fs.writeFileSync(outputFileName, JSON.stringify(updatedTranslations, null, 4));
        console.log(`Translations for ${lang} saved in ${outputFileName} \n\n`);
        return translations;
    }
    async function translateAndSaveAll() {
        const translationPromises = toLangs.map(async (lang) => {
            const outputFileName = path.join(traducoesDir, `${lang}.json`);
            const missingTranslation = {};
            if (fs.existsSync(outputFileName)) {
                const rawData = fs.readFileSync(outputFileName, "utf8");
                for (const [key, value] of Object.entries(jsonFile)) {
                    if (!rawData.includes(key)) {
                        missingTranslation[key] = value;
                    }
                }
            }
            else {
                return await (0, translateToUnicFolder_1.default)(key, endpoint, location, fromLang, [lang], jsonFile, folderNamePath);
            }
            return await translateAndUpdate(lang, missingTranslation);
        });
        await Promise.all(translationPromises);
        console.log("All translations updated successfully!");
    }
    translateAndSaveAll().catch((error) => {
        console.error(`Error translating and saving texts: ${error.message} \n`);
    });
}
