"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = translate;
const translateText_1 = __importDefault(require("./translateText"));
async function translate(key, endpoint, location, fromLang, toLangs, jsonFile) {
    const translatedJson = {};
    const isArrayBigerThanOne = toLangs.length > 1;
    for (const [jsonKey, jsonValue] of Object.entries(jsonFile)) {
        translatedJson[jsonKey] = await translateValue(jsonValue, key, endpoint, location, fromLang, toLangs, isArrayBigerThanOne);
    }
    return translatedJson;
}
async function translateValue(value, key, endpoint, location, fromLang, toLangs, isArrayBigerThanOne) {
    if (isInvalidJSONValue(value)) {
        throw new Error("Invalid JSON value");
    }
    if (isNotNeedToTranslate(value)) {
        return value;
    }
    else if (isString(value)) {
        return await translateString(value, key, endpoint, location, fromLang, toLangs, isArrayBigerThanOne);
    }
    else if (isArray(value)) {
        return await translateArray(value, key, endpoint, location, fromLang, toLangs, isArrayBigerThanOne);
    }
    else if (isObjectNotNull(value)) {
        return await translate(key, endpoint, location, fromLang, toLangs, value);
    }
    else {
        return null;
    }
}
async function translateString(value, key, endpoint, location, fromLang, toLangs, isArrayBigerThanOne) {
    const response = await (0, translateText_1.default)(value, fromLang, toLangs, endpoint, key, location);
    const translations = response[0].translations;
    const translatedValues = translations.map((translation) => {
        return translation.text;
    });
    return isArrayBigerThanOne ? translatedValues : translatedValues[0];
}
async function translateArray(array, key, endpoint, location, fromLang, toLangs, isArrayBigerThanOne) {
    const translatedArray = [];
    for (const item of array) {
        if (typeof item === "string") {
            const translatedItem = await translateString(item, key, endpoint, location, fromLang, toLangs, isArrayBigerThanOne);
            if (translatedItem !== null) {
                translatedArray.push(translatedItem);
            }
        }
        else {
            translatedArray.push(item);
        }
    }
    return translatedArray;
}
function isObjectNotNull(value) {
    return typeof value === "object" && value !== null;
}
function isString(value) {
    return typeof value === "string";
}
function isArray(value) {
    return Array.isArray(value);
}
function isNotNeedToTranslate(value) {
    const types = ["number", "boolean"];
    return types.includes(typeof value);
}
function isInvalidJSONValue(value) {
    const invalidTypes = ["function", "symbol", "undefined"];
    return invalidTypes.includes(typeof value);
}
